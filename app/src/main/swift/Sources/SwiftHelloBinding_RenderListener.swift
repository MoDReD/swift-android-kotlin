
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql' 'Sources' '../java' ///

/// interface com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener ///

public protocol SwiftHelloBinding_RenderListener: JavaProtocol {

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.drawPoint(int,int)

    func drawPoint( x: Int, y: Int )

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onDrawFrame()

    func onDrawFrame()

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceChanged(int,int)

    func onSurfaceChanged( width: Int, height: Int )

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceCreated()

    func onSurfaceCreated()

}


open class SwiftHelloBinding_RenderListenerForward: JNIObjectForward, SwiftHelloBinding_RenderListener {

    private static var SwiftHelloBinding_RenderListenerJNIClass: jclass?

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.drawPoint(int,int)

    private static var drawPoint_MethodID_5: jmethodID?

    open func drawPoint( x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawPoint", methodSig: "(II)V", methodCache: &SwiftHelloBinding_RenderListenerForward.drawPoint_MethodID_5, args: &__args, locals: &__locals )
    }

    open func drawPoint( _ _x: Int, _ _y: Int ) {
        drawPoint( x: _x, y: _y )
    }

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onDrawFrame()

    private static var onDrawFrame_MethodID_6: jmethodID?

    open func onDrawFrame() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "onDrawFrame", methodSig: "()V", methodCache: &SwiftHelloBinding_RenderListenerForward.onDrawFrame_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceChanged(int,int)

    private static var onSurfaceChanged_MethodID_7: jmethodID?

    open func onSurfaceChanged( width: Int, height: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(width) )
        __args[1] = jvalue( i: jint(height) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "onSurfaceChanged", methodSig: "(II)V", methodCache: &SwiftHelloBinding_RenderListenerForward.onSurfaceChanged_MethodID_7, args: &__args, locals: &__locals )
    }

    open func onSurfaceChanged( _ _width: Int, _ _height: Int ) {
        onSurfaceChanged( width: _width, height: _height )
    }

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceCreated()

    private static var onSurfaceCreated_MethodID_8: jmethodID?

    open func onSurfaceCreated() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "onSurfaceCreated", methodSig: "()V", methodCache: &SwiftHelloBinding_RenderListenerForward.onSurfaceCreated_MethodID_8, args: &__args, locals: &__locals )
    }


}

private typealias SwiftHelloBinding_RenderListener_drawPoint_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jint, _: jint ) -> ()

private func SwiftHelloBinding_RenderListener_drawPoint_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ x: jint, _ y: jint ) -> () {
    SwiftHelloBinding_RenderListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).drawPoint( x: Int(x), y: Int(y) )
}

private typealias SwiftHelloBinding_RenderListener_onDrawFrame_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> ()

private func SwiftHelloBinding_RenderListener_onDrawFrame_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> () {
    SwiftHelloBinding_RenderListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).onDrawFrame( )
}

private typealias SwiftHelloBinding_RenderListener_onSurfaceChanged_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jint, _: jint ) -> ()

private func SwiftHelloBinding_RenderListener_onSurfaceChanged_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ width: jint, _ height: jint ) -> () {
    SwiftHelloBinding_RenderListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).onSurfaceChanged( width: Int(width), height: Int(height) )
}

private typealias SwiftHelloBinding_RenderListener_onSurfaceCreated_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> ()

private func SwiftHelloBinding_RenderListener_onSurfaceCreated_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> () {
    SwiftHelloBinding_RenderListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).onSurfaceCreated( )
}

fileprivate class SwiftHelloBinding_RenderListenerLocal_: JNILocalProxy<SwiftHelloBinding_RenderListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let SwiftHelloBinding_RenderListener_drawPoint_0_thunk: SwiftHelloBinding_RenderListener_drawPoint_0_type = SwiftHelloBinding_RenderListener_drawPoint_0
        natives.append( JNINativeMethod( name: strdup("__drawPoint"), signature: strdup("(JII)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_RenderListener_drawPoint_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_RenderListener_onDrawFrame_1_thunk: SwiftHelloBinding_RenderListener_onDrawFrame_1_type = SwiftHelloBinding_RenderListener_onDrawFrame_1
        natives.append( JNINativeMethod( name: strdup("__onDrawFrame"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_RenderListener_onDrawFrame_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_RenderListener_onSurfaceChanged_2_thunk: SwiftHelloBinding_RenderListener_onSurfaceChanged_2_type = SwiftHelloBinding_RenderListener_onSurfaceChanged_2
        natives.append( JNINativeMethod( name: strdup("__onSurfaceChanged"), signature: strdup("(JII)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_RenderListener_onSurfaceChanged_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_RenderListener_onSurfaceCreated_3_thunk: SwiftHelloBinding_RenderListener_onSurfaceCreated_3_type = SwiftHelloBinding_RenderListener_onSurfaceCreated_3
        natives.append( JNINativeMethod( name: strdup("__onSurfaceCreated"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_RenderListener_onSurfaceCreated_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_johnholdsworth/SwiftHelloBinding_RenderListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension SwiftHelloBinding_RenderListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return SwiftHelloBinding_RenderListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class SwiftHelloBinding_RenderListenerBase: SwiftHelloBinding_RenderListener {

    public init() {}

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.drawPoint(int,int)

    open func drawPoint( x: Int, y: Int ) /**/ {
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onDrawFrame()

    open func onDrawFrame() /**/ {
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceChanged(int,int)

    open func onSurfaceChanged( width: Int, height: Int ) /**/ {
    }


    /// public abstract void com.johnholdsworth.swiftbindings.SwiftHelloBinding$RenderListener.onSurfaceCreated()

    open func onSurfaceCreated() /**/ {
    }


}
